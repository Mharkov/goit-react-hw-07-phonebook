{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","redux/contact/contact-actions.js","redux/contact/contact-operations.js","redux/contact/contact-selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","redux/contact/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","contactFilter","axios","defaults","baseURL","getContacts","state","contacts","items","getFilter","filter","getLoading","loading","filteredContacts","createSelector","normalizedFilter","toLowerCase","name","includes","connect","contactSelectors","dispatch","onSubmit","number","contact","post","then","data","catch","error","message","contactOperations","useState","setName","setNumber","className","styles","TaskEditor","e","preventDefault","find","alert","contactValidation","TaskEditor_label","TaskEditor_input","type","value","onChange","target","required","TaskEditor_button","onFilter","actions","onDel","id","delete","useDispatch","useEffect","a","get","TaskList","map","TaskList_item","TaskList_button","onClick","createReducer","_","payload","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","counterReducer","devTools","process","ReactDom","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3d0d4ec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskEditor\":\"ContactForm_TaskEditor__2gNh4\",\"TaskEditor_label\":\"ContactForm_TaskEditor_label__srN17\",\"TaskEditor_input\":\"ContactForm_TaskEditor_input__315g7\",\"TaskEditorinput\":\"ContactForm_TaskEditorinput__3OUT7\",\"TaskEditor_button\":\"ContactForm_TaskEditor_button__3jWOF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskList\":\"ContactList_TaskList__1vyTq\",\"TaskList_item\":\"ContactList_TaskList_item__bSFK_\",\"completed\":\"ContactList_completed__13zwS\",\"TaskList_text\":\"ContactList_TaskList_text__3unJ-\",\"TaskList_actions\":\"ContactList_TaskList_actions__3u_-J\",\"TaskList_button\":\"ContactList_TaskList_button__3BWZi\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  'contacts/fetchContactsRequest'\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n  'contacts/fetchContactsSuccess'\r\n);\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest'\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess'\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const contactFilter = createAction('contacts/filter');\r\n\r\n// export const contactAdd = createAction('contacts/add', (name, number) => ({\r\n//   payload: {\r\n//     id: Date.now(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// }));\r\n\r\n// export const contactAdd = (name, number) => {\r\n//   return {\r\n//     type: actionType.ADD,\r\n//     payload: {\r\n//       id: Date.now(),\r\n//       name,\r\n//       number,\r\n//     },\r\n//   };\r\n// };\r\n\r\n// export const contactDelete = (id) => {\r\n//   return {\r\n//     type: actionType.DELETE,\r\n//     payload: id,\r\n//   };\r\n// };\r\n\r\n// export const conatactFilter = (value) => ({\r\n//   type: actionType.CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n","import axios from 'axios';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} from './contact-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3000';\r\n\r\nexport const fetchContacts = () => async (dispatch) => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error.message));\r\n  }\r\n};\r\n\r\nexport const contactAdd = (name, number) => (dispatch) => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n\r\n  dispatch(addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch((error) => dispatch(addContactError(error.message)));\r\n};\r\n\r\nexport const contactDelete = (id) => (dispatch) => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch((error) => dispatch(deleteContactError(error.message)));\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getContacts = (state) => state.contacts.items;\r\nexport const getFilter = (state) => state.contacts.filter;\r\nexport const getLoading = (state) => state.contacts.loading;\r\nexport const getError = (state) => state.contacts.error;\r\n\r\nexport const filteredContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter)\r\n    );\r\n  }\r\n);\r\n\r\n// export const filteredContacts = (state) => {\r\n//   const allContacts = getContacts(state);\r\n//   const filter = getFilter(state);\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   return allContacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(normalizedFilter)\r\n//   );\r\n// };\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactForm.module.css';\r\nimport { connect } from 'react-redux';\r\nimport * as contactOperations from '../../redux/contact/contact-operations';\r\nimport * as contactSelectors from '../../redux/contact/contact-selectors';\r\n\r\nconst ContactForm = ({ onSubmit, items }) => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleChangeName = (e) => {\r\n    setName(e.target.value);\r\n  };\r\n  const handleChangeNumber = (e) => {\r\n    setNumber(e.target.value);\r\n  };\r\n\r\n  const contactValidation = () => {\r\n    if (items.find((contact) => name === contact.name)) {\r\n      alert(`${name} is already in contacts`);\r\n      return true;\r\n    }\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (contactValidation()) {\r\n      return;\r\n    }\r\n\r\n    onSubmit(name, number);\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className={styles.TaskEditor} onSubmit={handleSubmit}>\r\n        <label className={styles.TaskEditor_label}>\r\n          Name\r\n          <input\r\n            className={styles.TaskEditor_input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            onChange={handleChangeName}\r\n            required\r\n          />\r\n        </label>\r\n        <label className={styles.TaskEditor_label}>\r\n          Number\r\n          <input\r\n            className={styles.TaskEditor_input}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={number}\r\n            onChange={handleChangeNumber}\r\n            required\r\n          />\r\n        </label>\r\n        <button className={styles.TaskEditor_button}> Add contact</button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    items: contactSelectors.getContacts(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSubmit: (name, number) =>\r\n      dispatch(contactOperations.contactAdd(name, number)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../redux/contact/contact-actions';\r\nimport * as contactSelectors from '../../redux/contact/contact-selectors';\r\n\r\nconst Filter = ({ value, onFilter }) => {\r\n  return (\r\n    <div>\r\n      Find contacts by name\r\n      <input type=\"text\" value={value} onChange={onFilter} />\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: contactSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onFilter: (e) => dispatch(actions.contactFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactList.module.css';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport * as contactOperations from '../../redux/contact/contact-operations';\r\nimport * as contactSelectors from '../../redux/contact/contact-selectors';\r\n\r\nconst ContactList = ({ onDel, contacts }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => dispatch(contactOperations.fetchContacts()), [dispatch]);\r\n\r\n  return (\r\n    <ul className={styles.TaskList}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li className={styles.TaskList_item} key={id}>\r\n          {name} : {number}\r\n          {\r\n            <button\r\n              className={styles.TaskList_button}\r\n              type=\"button\"\r\n              name=\"delte\"\r\n              onClick={() => onDel(id)}\r\n            >\r\n              delete\r\n            </button>\r\n          }\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  onDel: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: contactSelectors.filteredContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDel: (id) => dispatch(contactOperations.contactDelete(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\nimport * as contactSelectors from '../src/redux/contact/contact-selectors';\n\nconst App = ({ loading }) => {\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      {loading && <h1>Загружаем ...</h1>}\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: contactSelectors.getLoading(state),\n  };\n};\n\nexport default connect(mapStateToProps, null)(App);\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  contactFilter,\r\n} from './contact-actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [payload, ...state],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [contactFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [fetchContactsError]: (_, { payload }) => payload,\r\n  [addContactError]: (_, { payload }) => payload,\r\n  [deleteContactError]: (_, { payload }) => payload,\r\n  [fetchContactsRequest]: () => null,\r\n  [addContactRequest]: () => null,\r\n  [deleteContactRequest]: () => null,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n  error,\r\n});\r\n\r\n// const items = (state = contactinitialState, { type, payload }) => {\r\n//   switch (type) {\r\n//     case actionType.ADD:\r\n//       return [payload, ...state];\r\n\r\n//     case actionType.DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case actionType.CHANGE_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\nimport counterReducer from './contact/contacts-reducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\n//\r\n// const rootReducer = combineReducers({\r\n//   contacts: persisterReducer(PersistConfig, counterReducer),\r\n// });\r\n\r\n// const persisterReducer = persistReducer(PersistConfig, rootReducer);\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: counterReducer,\r\n  },\r\n  middleware: middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\nexport default store;\r\n\r\n// import { applyMiddleware, combineReducers } from 'redux';\r\n// const rootReducer = combineReducers({\r\n//   contacts: counterReducer,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// const initialState = {\r\n//   contacts: {\r\n//     items: [\r\n//       { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n//       { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n//       { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n//       { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n//     ],\r\n//     filters: '',\r\n//   },\r\n// };\r\n\r\n// const reducer = (state = initialState, { type, payload }) => {\r\n//   switch (type) {\r\n//     case 'contacts/add':\r\n//       return {\r\n//         ...state,\r\n//         contacts: {\r\n//           ...state.contacts,\r\n//           items: [payload, ...state.contacts.items],\r\n//         },\r\n//       };\r\n\r\n//     case 'contacts/delete':\r\n//       return {\r\n//         ...state,\r\n//         contacts: {\r\n//           ...state.contacts,\r\n//           items: state.contacts.items.filter(({ id }) => id !== payload),\r\n//         },\r\n//       };\r\n\r\n//     case 'contacts/filter':\r\n//       return {\r\n//         ...state,\r\n//         contacts: {\r\n//           ...state.contacts,\r\n//           items: state.contacts.items.filter((name) =>\r\n//             name.toLowerCase().includes(state.contacts.filters.toLowerCase())\r\n//           ),\r\n//         },\r\n//       };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","import React from 'react';\nimport ReactDom from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport store from './redux/store';\n\nReactDom.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}